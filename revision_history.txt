Starship Control Demo - Version History

Version 0.1 - Initial Concept (March 29, 2025)
- Description: Defined the basic idea: an HTML5 app served by Apache 2 on a Raspberry Pi 4, with two stations (Navigation and Engineering) that toggle options and share statuses in real-time, stored locally via localStorage.
- Features:
  - Station selection (Navigation, Engineering).
  - Navigation: Toggle FTL and Sublight, view engine statuses.
  - Engineering: Toggle FTL and Sublight engines, view navigation statuses.
- Status: Conceptual; no working code yet.

Version 0.2 - First WebSocket Attempt (March 29, 2025)
- Description: Introduced WebSocket for real-time communication, served alongside Apache on the Pi at ws://192.168.86.69:8080.
- Features:
  - Basic index.html with station selection buttons.
  - Node.js WebSocket server (server.js) to relay messages.
- Issues:
  - Clients relied on server for all communication, not P2P as desired.
  - No local storage or UI updates implemented.

Version 0.3 - Peer-to-Peer with WebRTC (March 29, 2025)
- Description: Shifted to WebRTC via PeerJS for direct client-to-client communication, reducing server dependency.
- Features:
  - PeerJS integration for P2P toggling.
  - Initial IP-based connection attempt using client IPs collected by the server.
- Issues:
  - Automatic peer connection via IPs failed; required manual peer ID entry.
  - UI stuck at station selection due to WebSocket issues.

Version 0.4 - WebSocket Coordination (March 29, 2025)
- Description: Used WebSocket server to coordinate PeerJS IDs automatically, eliminating manual entry.
- Features:
  - Server collects IPs and PeerJS IDs, sends setup data to clients.
  - Clients connect directly via PeerJS after setup.
- Issues:
  - Clients stuck at "Claimed [station], waiting..." due to WebSocket closures from page reloads.

Version 0.5 - Working Demo (March 29, 2025)
- Description: Fixed WebSocket issues by avoiding page reloads, achieving a functional demo.
- Features:
  - Dynamic UI updates without reloading (setup/station screens).
  - Two-way PeerJS communication: Navigation and Engineering toggle and update statuses.
  - Local storage for toggle states.
- Issues:
  - No handling for disconnections (e.g., screen timeouts).
  - Browser refreshes broke sessions.

Version 0.6 - Stability Enhancements (March 29, 2025)
- Description: Added reconnection and session persistence to handle timeouts and refreshes.
- Features:
  - Auto-reconnect for WebSocket and PeerJS on disconnection (e.g., screen timeout).
  - Session restore from localStorage on refresh with a warning prompt.
  - Persistent status updates in localStorage and UI.
- Status: Current working version; stable for basic use on Raspberry Pi 4.

Version 0.7 - Button Color Update (March 29, 2025)

- Description: Modified index.html to change button colors based on their status.
- Features:
  - Buttons turn green when "on" and red when "off" using CSS classes.
  - Updated toggle function to dynamically adjust button colors.
- Status: Current version with improved UI feedback.

Version 0.8 - Distributed Simulator Framework (March 30, 2025)

Description: Expanded the demo into a distributed starship simulator with modular station files and server-world integration, building on PeerJS P2P and WebSocket signaling.
Features:
index.html as Launchpad: Station selection redirects to nav.html or engineering.html with PeerJS connection info (peer IDs) via URL parameters.
nav.html: Navigation station with throttle (0-100%) and course (0-360°) inputs, calculates ship speed/course from local inputs and Engineering’s power output via P2P, reports speed/course to server every 5 seconds during downtime.
engineering.html: Engineering station with power output (0-100%) input, syncs with Navigation via P2P, calculates its own speed view for display.
server.js: Updated to redirect clients to station pages after pairing, tracks ship position (x, y) in the external world using Navigation’s updates, serves files via Express.
Distributed Processing: Speed/course calculated client-side using P2P data, leveraging client CPUs for parallel computation.
Local Storage: Persistent state for each station (throttle, course, power).
Issues:
Limited to two stations (Navigation, Engineering); needs expansion for full bridge crew.
Basic speed calculation lacks ramp-up delays or resistance factors.
Server-world interaction is one-way (client to server); no feedback to clients yet (e.g., asteroid proximity).
Status: Functional prototype with distributed architecture; ready for further station additions and refinement.
Notes on the Update
Date: Set to March 30, 2025, since we’re working today and building on your Version 0.7 from yesterday.
Features: Captures the split into index.html (launchpad), nav.html, and engineering.html, plus the distributed processing and server-world stuff we’ve been iterating on.
Issues: Highlights where we’re at—two stations, simple calc, no world feedback yet—so you can see what’s next.
